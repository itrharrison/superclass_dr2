#!/usr/bin/python
# encoding: UTF8

# Use Python notation for lists, strings etc.!!!
# Create your own .ini file with adjusted parameters following the notation and variable names as given here.
# code should be run locally now!

# root path for output:    
# for data:
root_run = '/state/partition1/hillier/kohlinger_runs/output_RadOp_data_30x30'
# if data should be stored on different drive (e.g. when running on SSD):
root_store = '/state/partition1/hillier/kohlinger_runs/store_RadOp_data_30x30'

# root path to signal matrices
root_signal = '/state/partition1/hillier/kohlinger_runs/output_RadOp_data_30x30'
root_signal_store = '/state/partition1/hillier/kohlinger_runs/store_RadOp_data_30x30'
# if working with mock data and identical fields (--> masking) the initial signal matrices can be shared:
share_signal_matrices = False
# then the identifier for the already calculated SM has to be supplied:
shared_identifier_SM = 'field1'

# root path to shear data catalogs
# below that folder the code expects that subfolders with the redshift cuts
# defined below exist of the form: .../<z_min>z<z_max>/
root_path_data = '/home/hillier/code/powerSpec/kohlinger_code/catalog_COSMOS'

# specify the redshift cuts applied in order to bin data in redshift (used for loading cats and folders);
# example for two bins 0.50 <= z1 < 0.85, 0.85 <= z2 < 1.30:
# Note that you must create these catalogs!
# Go easy on the number of simultaneously estimated redshift correlations (also
# depending on the chosen side_length of the shear pixelization) and be aware
# that you can get all unique n_z * (n_z + 1) / 2 redshift bin correlations
# by running the code sequentially on pairs of redshift bins (this will require 
# some post-processing though...)
z_min = [0.50, 0.85]#, 1.30]
z_max = [0.85, 1.30]#, 1.60]

# in each redshift subfolder as defined above must exist a FITS-format 
# catalogue with name <identifier_in>.fits   
# if you make the script BASH-loopable (see below) you need to pass the full 
# catalogue name but without the file-ending!     
identifier_in = 'W1'

# valid modes: 'data', something else   
# if mode is NOT 'data', coordinates are assumed to be flat!!!
mode = 'data'
#mode = 'mocks'

# supply column name of right ascension (RA, alpha):
column_ra = 'ALPHA_J2000'
# supply column name of declination (Dec, alpha):
column_dec = 'DELTA_J2000'
# if you set mode to 'mocks', 'clones', or 'grfs' RA and Dec will be treated as
# flat x, y coordinates (accounting for the sign switch due to RA definition)
# supply column name containing the e1 component of the ellipticity
column_e1 = 'e1'
# supply column name containing the e2 component of the ellipticity
column_e2 = 'e2'
# supply further column names for optional but often used columns (depending on
# detsils of shape measurement method)
# if any of the optional columns is not required, set to 'dummy'!!!
# 1) lensing weights
# supply column name for weights:
column_weight = 'weight'
# 2) the multiplicative bias correction 
# will be applied as a weighted average per pixel and per component
# if m1 = m2 = m, supply the same column name for both components
column_m1 = 'dummy'
column_m2 = 'dummy'
# 3) the additive bias correction
# will be subtracted off per element and component
column_c1 = 'dummy'
column_c2 = 'dummy'

# if filenames are conveniently numbered, set this flag to make QE script BASH-loopable
make_BASH_loopable = False

# flag for performing Newton-Raphson optimization:
optimize = True

# if you do not want to invert any matrices.
# code was written and "optimized" for using explicit inverses of matrices though
# it becomes much slower if this flag is set to True
# both approaches yielded consistent results in all cases tested so far (the traces are probably ensuring numerical stability...)
do_not_invert_that_matrix = False

# this flag will stop the script after calculation of signal matrices for derivatives
calculate_only_signal_matrices_for_derivatives = False

# set flag for deleting "cache" folder after calculations (can be quite large, e.g. W1 with 2 zbins, 7 EE + 6BB ~ 105GB):
delete_cache = True

# if you want to use sparse matrices:
use_sparse_matrices = False

# starting value for convergence regulation parameter in Newton-Raphson iteration:
# default:
lambda0 = 0.35

# criterion for convergence of E-mode band powers (e.g. <5%):
convergence_criterion = 0.05

#resetting of negative band powers at the start of each Newton-Raphson iteration:
reset_negative_band_powers = False #True
# empirical value, 1e-6 is too large, exactly 0 might cause divisions by 0 in inversion...
resetting_value = 1e-9

# we iterate until 'convergence_criterion' convergence, but if this is not achieved, we stop after:
# minimal number of iterations is 2!
max_iterations = 50

# set number of cores that the code is allowed to use in parallel ("0" means all!) on the machine for the calculation of
# a) number of cores during Fisher matrix calculation, band power estimates:
max_ncpus = 4
# b) signal matrices:
ncpus_SM = 4
# c) band window matrices:
ncpus_BWM = 4

# if 'False' we blindly believe that all matrix inversions work to float-precision, if 'True' we print output of the tests (but continue anyways...)
numerical_test = False

# side length of one pixel in degrees (data is binned into grid on tangent-plane):
# e.g. 0.12 deg correspond to l_pix = 3000 --> l_max = 2 * l_pix = 6000 
side_length = 0.04714045208 # 7141111859544609

# internal ellipticity dispersion splitted for components e1 and e2, must be assumed at the moment...
# has to be passed as list per zbin (and for folder- & filenames the first element of sigma_int_e1 is taken):
# values measured from full survey!
# length of list must be as long as number of redshift bins!
sigma_int_e1 = [0.269873053328, 0.303848100769]
sigma_int_e2 = [0.267043713769, 0.321916015749]
#sigma_int_e1 = [0.28, 0.28]
#sigma_int_e2 = [0.28, 0.28]

# if ellipticity dispersion is not well-known, one can marginalize over an additional noise amplitude,
# i.e. the noise matrix is defined as:
# C_noise_(ij, ab, \mu\nu) = A_noise(z_\mu) * sigma_int_a**2(z_\mu) / N_i(z_\zmu) d_ij d_ab d_\mu\nu
# ATTENTION: This seems to produce messed up band window matrices for yet unresolved reasons!!!
marginalize_over_noise = False

# bands to extract simultaneously (i.e., 'EE', 'BB', 'EB')
bands = ['EE', 'BB', 'EB']
# adjust band powers manually, for EE!
# rules of thumb:
# i) include one band below lowest l_field and above highest l_pix
# ii) spacing between bands must be > 2*l_field
# ATTENTION: Specify borders here non-overlapping!
#bands_EE_min = [100., 821., 1541., 2261., 3001., 4083., 8573.]
#bands_EE_max = [820., 1540., 2260., 3000., 4082., 8572., 18000.]
#bands_EE_min = [94., 228., 682., 1136., 1873., 3782., 7637.]
#bands_EE_max = [227., 681., 1135., 1872., 3781., 7636., 10182.]
#e.g. for side_length = 0.12:
#bands_EE_min = [10., 76., 221., 421., 671., 1311., 2301.]
#bands_EE_max = [75., 220., 420., 670., 1310., 2300., 6000.]
#bands_EE_min = [133., 322., 965., 1608., 2649., 5348., 10801.]
#bands_EE_max = [321., 964., 1607., 2648., 5347., 10800., 14400.]
#bands_EE_min = [80., 180., 550., 1000., 1600., 5000., 10800.]
#bands_EE_max = [179., 549., 999., 1599., 4999., 10799., 15000]
bands_EE_min = [80., 180., 1000., 1600., 5000., 10800.]
bands_EE_max = [179., 999., 1599., 4999., 10799., 15000.]

# this is the number of elements that must be contained at least in pixel for being included in analysis:
# all previous runs included all pixels with at least 1 element!!!
minimal_number_elements_per_pixel = 1

# if BB bands should be included (by default the last band is excluded!) in convegrence criterion of Newton-Raphson:
include_BB_in_convergence = False

# flag for fast calculation of signal matrices:
# 'False' uses nested loops to calculate each element and to fill the matrix... 
calculate_SM_fast = True

# parameters for calculation of band window functions:
# flag for performing these calculations:
band_window = True

# this flag will stop the script after calculation of signal matrices for band window
calculate_only_signal_matrices_for_band_window_matrix = False

# \ell-range should cover \ell-range that carries physical signal!
ell_min = 180. 
ell_max = 5400.
# total number of \ell-nodes:
nell = 100
